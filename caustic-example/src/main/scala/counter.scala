// Autogenerated by Caustic Compiler
package counter

import caustic.runtime.service._
import spray.json._
import scala.util.Try

// TODO: Copy block comment from *.acid file.
case class Total(
  value: Int
)

/**
 * A Spray Json serialization protocol for instances of [[Total]].
 */
object Total extends DefaultJsonProtocol {
  type Pointer[Total] = String
  implicit val TotalFormat = jsonFormat1(Total.apply)
}

import Total._
         
// TODO: Copy block comment from *.acid file.
case class Counter(client: Client) {
  // TODO: Copy block comment from *.acid file.
  def inc(
    x: Pointer[Total]
  ): Try[Int] = {
    this.client.execute(
      cons(
        store(text("root/counter/inc@x"), text(x)),
        branch(notEqual(read(add(load("root/counter/inc@x"), text("@value"))), None),
          write(add(load("root/counter/inc@x"), text("@value")), add(read(add(load("root/counter/inc@x"), text("@value"))), real(1.0))),
          write(add(load("root/counter/inc@x"), text("@value")), real(1.0))
        )
      )) map { result =>
      // Extract a Json string from the result.
      if (result.isSetText)
        result.getText
      else if (result.isSetReal)
        result.getReal.toString
      else if (result.isSetFlag)
        result.getFlag.toString
      else
        ""
    } map {
      // Deserialize the result using Spray Json.
      _.parseJson.convertTo[Int]
    }
  }
       
}
         
     