import functools

from caustic.syntax.codec import *


def transaction(client):
    """
    Executes the transaction generated by the specified function on the underlying database
    client provider. Injects a __context__ attribute into the global namespace of the function,
    which is used by the library to record the various accesses and modifications performed in the
    body of the function.

    :param client: Thrift database client provider.
    :return: Result of transaction execution.
    """
    def executor(f):
        @functools.wraps(f)
        def wrapped(*args, **kwargs):
            if '__context__' not in f.__globals__:
                # Inject a transaction context into the function's global namespace.
                f.__globals__['__context__'] = Empty
                f(*args, **kwargs)
                result = client().execute(f.__globals__['__context__'])
                del f.__globals__['__context__']

                # Parse the result back into a Python type.
                if result.flag is not None:
                    return result.flag
                elif result.real is not None:
                    return result.real
                elif result.text is not None:
                    return result.text
                else:
                    raise ValueError('Unknown response value')
            else:
                # If the function already has a transaction context, then nest the transaction.
                f(*args, **kwargs)
        return wrapped
    return executor
